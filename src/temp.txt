import './bundler.js';
import './style.scss';
import 'swiper/swiper-bundle.css';
import { gsap } from 'gsap';

import { ScrollTrigger } from 'gsap/ScrollTrigger';
import Swiper from 'swiper';

gsap.registerPlugin(ScrollTrigger);

const tl = gsap.timeline({
	scrollTrigger: {
		scrub: 1,
		trigger: '#body',
	},
});

tl.to('#pin-windmill-svg', {
	rotateZ: 1500,
});

$("[carousel='component']").each(function () {
	let componentEl = $(this);
	let wrapEl = componentEl.find("[carousel='wrap']");
	let swiperEl = componentEl.find('.swiper');
	let itemEl = wrapEl.children().children();
	let nextEl = componentEl.find("[carousel='next']");
	let prevEl = componentEl.find("[carousel='prev']");
	let rotateAmount = 360 / itemEl.length;
  console.log('rotateAmount: ', rotateAmount);
  let zTranslate = 2 * Math.tan((rotateAmount / 2) * (Math.PI / 180));
	let negTranslate = `calc(var(--3d-carousel-item-width) / -${zTranslate} - var(--3d-carousel-gap))`;
	let posTranslate = `calc(var(--3d-carousel-item-width) / ${zTranslate} + var(--3d-carousel-gap))`;

	wrapEl.css('--3d-carousel-z', negTranslate);
	wrapEl.css('perspective', posTranslate);

	itemEl.each(function (index) {
		$(this).css('transform', `rotateY(${rotateAmount * index}deg) translateZ(${posTranslate})`);
	});

	let introTl = gsap.timeline({
		onComplete: () => {
			swiperCode();
		},
	});
	introTl.to(wrapEl, {
		opacity: 1,
		duration: 0.3,
	});
	introTl.fromTo(
		wrapEl,
		{
			'--3d-carousel-rotate': 100,
			'--3d-carousel-rotate-x': -90,
		},
		{
			'--3d-carousel-rotate': 0,
			'--3d-carousel-rotate-x': -4,
			duration: 4,
			ease: 'power2.inOut',
		},
		'<'
	);
	introTl.to(
		'[fade-up]',
		{
			opacity: 1,
		},
		'>-0.3'
	);

	function swiperCode() {
		let tl = gsap.timeline({
			paused: true,
		});
		tl.fromTo(
			wrapEl,
			{
				'--3d-carousel-rotate': 0,
			},
			{
				'--3d-carousel-rotate': -(360 - rotateAmount),
				duration: 30,
				ease: 'none',
			}
		);

		let progress = {
			value: 0,
		};

		const swiper = new Swiper('#tax', {
			effect: 'creative',
			loop: true,
			grabCursor: true,
			keyboard: true,
			speed: 500,
		});
		swiper.on('progress', function (e) {
			gsap.to(progress, {
				value: e.progress,
				onUpdate: () => {
					tl.progress(progress.value);
				},
			});
		});
	}
});

/*  */

(function () {
	/* const instance = document.querySelector('#tvs')!;
	const children = instance.children[0].children;
	let rotateAmount = 360 / children.length;
	let zTranslate = 2 * Math.tan((rotateAmount / 2) * (Math.PI / 180));
	let negTranslate = `calc(var(--3d-carousel-item-width) / -${zTranslate} - var(--3d-carousel-gap))`;
	let posTranslate = `calc(var(--3d-carousel-item-width) / ${zTranslate} + var(--3d-carousel-gap))`;
	//@ts-ignore
	instance.style.setProperty('--3d-carousel-z', negTranslate);
	//@ts-ignore
	instance.style.setProperty('perspective', posTranslate);
	Array.from(children as unknown as HTMLDivElement[]).forEach(function (el, index) {
		el.style.transform = `rotateY(${rotateAmount * index}deg) translateZ(${posTranslate})`;
	});
	console.log('slist: ', length); */
	new Swiper('#tvs', {
		effect: 'creative',
		loop: true,
		autoplay: {
			delay: 1000,
		},
		grabCursor: true,
		keyboard: true,
		speed: 500,
	});
})();
